{"ast":null,"code":"var _jsxFileName = \"/Users/elenkovlorenzo/real-candy/metaplex/js/packages/candy-machine-ui/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from './candy-machine';\nimport { formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const [hasEnoughFunds, setHasEnoughFunds] = useState(false);\n  const [isWhitelistedUser, hasIsWhitelistedUser] = useState(false);\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async function () {\n    let commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'confirmed';\n\n    if (!anchorWallet) {\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // duplication of state to make sure we have the right values!\n\n        let isWLUser = false;\n        let userPrice = cndy.state.price; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n            userPrice = cndy.state.whitelistMintSettings.discountPrice;\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            isWLUser = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(isWLUser);\n\n            if (cndy.state.isWhitelistOnly) {\n              active = isWLUser && (presale || active);\n            }\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n\n        userPrice = isWLUser ? userPrice : cndy.state.price;\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.tokenMint) {\n          // retrieves the SPL token\n          const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            const valid = new anchor.BN(balance.value.amount).gte(userPrice); // only allow user to mint if token balance >  the user if the balance > 0\n\n            setIsValidBalance(valid);\n            active = active && valid;\n          } catch (e) {\n            setIsValidBalance(false);\n            active = false; // no whitelist user, no mint\n\n            console.log('There was a problem fetching SPL token balance');\n            console.log(e);\n          }\n        } else {\n          const balance = new anchor.BN(await connection.getBalance(anchorWallet.publicKey));\n          const valid = balance.gte(userPrice);\n          setHasEnoughFunds(valid);\n          setIsValidBalance(valid);\n          active = active && valid;\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 66 : 0) + (cndy.state.whitelistMintSettings ? 34 : 0) + ((_cndy$state$whitelist = cndy.state.whitelistMintSettings) !== null && _cndy$state$whitelist !== void 0 && (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) !== null && _cndy$state$whitelist2 !== void 0 && _cndy$state$whitelist2.burnEveryTime ? 34 : 0) + (cndy.state.gatekeeper ? 33 : 0) + ((_cndy$state$gatekeepe = cndy.state.gatekeeper) !== null && _cndy$state$gatekeepe !== void 0 && _cndy$state$gatekeepe.expireOnUse ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        var _setupMint;\n\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info'\n          });\n          setupMint = await createAccountsForMint(candyMachine, wallet.publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: 'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info'\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error'\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info'\n          });\n        }\n\n        let mintResult = await mintOneToken(candyMachine, wallet.publicKey, beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n        let status = {\n          err: true\n        };\n        let metadataStatus = null;\n\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n          metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, 'processed');\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: 'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n  const [containerFlex, setContainerFlex] = useState('row');\n  useEffect(() => {\n    if (window.outerWidth > 429) {\n      setContainerFlex('row');\n    } else {\n      setContainerFlex('column');\n    }\n  }, []);\n  useEffect(() => {\n    console.log(containerFlex);\n  }, [containerFlex]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      style: {\n        position: 'relative',\n        paddingTop: '30vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          padding: 24,\n          paddingBottom: 10,\n          backgroundColor: '#151A1F',\n          borderRadius: 8\n        },\n        children: [!wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: containerFlex,\n            justifyContent: \"center\",\n            wrap: \"wrap\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: `${itemsRemaining}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 5,\n              children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: \"COMPLETED\",\n                  onComplete: toggleMintButton\n                }, \"endSettings\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"TO END OF MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 558,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? 'COMPLETED' : isPresale ? 'PRESALE' : 'LIVE',\n                  onComplete: toggleMintButton\n                }, \"goLive\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 25\n                }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"UNTIL WHITELIST MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 587,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n            children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n              wallet: {\n                publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                //@ts-ignore\n                signTransaction: wallet.signTransaction\n              },\n              gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n              clusterUrl: rpcUrl,\n              cluster: cluster,\n              handleTransaction: async transaction => {\n                setIsUserMinting(true);\n                const userMustSign = transaction.signatures.find(sig => sig.publicKey.equals(wallet.publicKey));\n\n                if (userMustSign) {\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign one-time Civic Pass issuance',\n                    severity: 'info'\n                  });\n\n                  try {\n                    transaction = await wallet.signTransaction(transaction);\n                  } catch (e) {\n                    setAlertState({\n                      open: true,\n                      message: 'User cancelled signing',\n                      severity: 'error'\n                    }); // setTimeout(() => window.location.reload(), 2000);\n\n                    setIsUserMinting(false);\n                    throw e;\n                  }\n                } else {\n                  setAlertState({\n                    open: true,\n                    message: 'Refreshing Civic Pass',\n                    severity: 'info'\n                  });\n                }\n\n                try {\n                  await sendTransaction(props.connection, wallet, transaction, [], true, 'confirmed');\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign minting',\n                    severity: 'info'\n                  });\n                } catch (e) {\n                  setAlertState({\n                    open: true,\n                    message: 'Solana dropped the transaction, please try again',\n                    severity: 'warning'\n                  });\n                  console.error(e); // setTimeout(() => window.location.reload(), 2000);\n\n                  setIsUserMinting(false);\n                  throw e;\n                }\n\n                await onMint();\n              },\n              broadcastTransaction: false,\n              options: {\n                autoShowModal: false\n              },\n              children: /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                setIsMinting: val => setIsUserMinting(val),\n                onMint: onMint,\n                isActive: isActive || isPresale && isWhitelistUser && isValidBalance,\n                hasFunds: hasEnoughFunds,\n                isWhitelisted: isWhitelistUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n              candyMachine: candyMachine,\n              isMinting: isUserMinting,\n              setIsMinting: val => setIsUserMinting(val),\n              onMint: onMint,\n              isActive: isActive || isPresale && isWhitelistUser && isValidBalance,\n              hasFunds: hasEnoughFunds,\n              isWhitelisted: isWhitelistUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          align: \"center\",\n          display: \"block\",\n          style: {\n            marginTop: 7,\n            color: 'grey'\n          },\n          children: \"Brought by Heroes of Olympus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: alertState.hideDuration === undefined ? 6000 : alertState.hideDuration,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 495,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"xRbvLNLlBWmHqs8/7mOhnJeAJdM=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/Users/elenkovlorenzo/real-candy/metaplex/js/packages/candy-machine-ui/src/Home.tsx"],"names":["useCallback","useEffect","useMemo","useState","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","Connection","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","formatNumber","getAtaForMint","toDate","MintCountdown","MintButton","GatewayProvider","sendTransaction","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","hasEnoughFunds","setHasEnoughFunds","isWhitelistedUser","hasIsWhitelistedUser","rpcUrl","rpcHost","wallet","cluster","network","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","commitment","connection","candyMachineId","cndy","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","parseInt","value","amount","e","console","log","tokenMint","valid","BN","gte","getBalance","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","gatekeeper","expireOnUse","Error","hideDuration","startsWith","onMint","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","setupMint","status","err","transaction","txTimeout","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","loop","setTimeout","containerFlex","setContainerFlex","outerWidth","marginTop","position","paddingTop","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","getCountdownDate","justifyContent","gatekeeperNetwork","userMustSign","signatures","find","sig","equals","autoShowModal","val","color"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const [hasEnoughFunds, setHasEnoughFunds] = useState(false);\n  const [isWhitelistedUser, hasIsWhitelistedUser] = useState(false);\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setHasEnoughFunds(valid);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  const [containerFlex, setContainerFlex] = useState<any>('row');\n  useEffect(() => {\n    if (window.outerWidth > 429) {\n      setContainerFlex('row');\n    } else {\n      setContainerFlex('column');\n    }\n  },[]);\n\n  useEffect(() => {\n    console.log(containerFlex);\n  },[containerFlex])\n  return (\n    <Container style={{ marginTop: 0 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative', paddingTop: '30vh' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 8,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction={containerFlex}\n                  justifyContent=\"center\"\n                  wrap=\"wrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL WHITELIST MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                      hasFunds={hasEnoughFunds}\n                      isWhitelisted={isWhitelistUser}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                    hasFunds={hasEnoughFunds}\n                    isWhitelisted={isWhitelistUser}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Brought by Heroes of Olympus\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}